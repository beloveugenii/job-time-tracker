#!/usr/bin/env python3

import sqlite3, readline, sys, re, datetime
from ui import *
from libjtt import *

menu_entries = ('add', 'configure', 'quit', 'next month', 'previous month')
# НОВЫЕ ФУНКЦИИ


#  actions = { #'a': lambda args:
            #  'q': ex(0),
            #  'p': change_period(cur, current_period, direction)
            #  #  'p': lambda: print((datetime.date.today() - datetime.timedelta(31)).isoformat()),
            #  #  'n': lambda: print((datetime.date.today() + datetime.timedelta(31)).isoformat()),
            #  'default': lambda: print('Неизвестная команда'),
           #  }











PROG_NAME = 'job-time-tracker'
VERSION = '0.1.1.1'
DB_NAME = sys.path[0] + '/data.db'

#  readline.set_completer_delims('\n,')
readline.parse_and_bind('tab: complete')

con = sqlite3.connect(DB_NAME)
cur = con.cursor()

create_tables(cur)
con.commit()

while True:
    # Пытаемся получить значение выбранного периода времени из БД
    current_period = (cur.execute('SELECT selected_period FROM config').fetchone())

    if current_period is None:
    # Если нет записанного значения - получаем текущий месяц в виде ГГГГ-ММ
        current_period = (cur.execute("SELECT date()").fetchone())[0][:7]
        # и записываем его в БД
        cur.execute('INSERT INTO config VALUES(?)', (current_period, ))
        con.commit()

    else:
        # Если получилось получить значение из БД, приводим его к виду ГГГГ-ММ
        current_period = current_period[0]
    
    changed = False
    
# Пытаемся получить строки данных за выбранный период времени
    period_data = get_period_data(cur, current_period)    
    # И конфигурацию текущего выбранного периода времени
    period_params = get_period_params(cur, current_period)


    # Вывод на экран
    clear()
    header(' '.join((PROG_NAME, VERSION, ':', pretty_period(current_period))))
    
    if period_params is not None:
        print_as_table(calculate(period_params, period_data), ' ')
        line() 

    print_as_table(period_data, ' ') if period_data else print('Нет данных за указанный период...')

    menu(menu_entries, 2)

    


    readline.set_completer(Completer([item[0] for item in menu_entries] + dd).complete)


    action = input('>> ').lower().strip()

    if action in 'pn':
        changed = change_period(cur, current_period, action)

    elif action == 'q':
        ex(0)

    elif action == 'a':
        l = input().strip().split(' ')
        cur.execute('insert into period_data values(?, ?, ?)', (get_date(l[0]), float(l[1]), float(l[2])))
        changed = True

    else:
        help('not_impl')

    if changed:
        con.commit()
        changed = False



    



con.close()
clear()





