#!/usr/bin/env python3

import sqlite3, readline, sys, re, datetime
from ui import *
from libjtt import *
import completer as c

PROG_NAME = 'job-time-tracker'
VERSION = '0.2.0-3'
DB_NAME = sys.path[0] + '/data.db'

readline.parse_and_bind('tab: complete')

con = sqlite3.connect(DB_NAME)
cur = con.cursor()

create_tables(cur)
con.commit()

wc = False

while True:
    current_period, wc = get_current_period(cur)
    period_params, wc = get_period_params(cur, current_period)
    
    if wc:
        con.commit()
        wc = not wc

    period_data = get_period_data(cur, current_period)    

    # Вывод на экран
    clear()
    header(' '.join((PROG_NAME, VERSION + ':', pretty_period(current_period))))
    
    if period_params is not None:
        print_as_table(calculate(period_params, period_data), ' ')
        line() 

    if period_data: print_as_table(pretty_period_data(period_data), ' ')
    else: helps(messages['ndip'], 0)

    menu(menu_str, 3)

    readline.set_completer(c.Completer(
        {'a': dd, 'p': [], 'n': [],
         'e': sorted([str(l) for l in range(1, len(period_data) + 1)]) + dd, 
         'r': sorted([str(l) for l in range(1, len(period_data) + 1)] ), 
        'h': [], 'q': [],'c': changable_params,
    }).complete)

    action, args = command_parser(input('>> ').lower().strip().split(' '),''.join([w[0] for w in menu_str]))

    if action is None: 
        helps(messages['ua'])
    
    elif action in 'pn': 
        wc = change_period(cur, current_period, action)
    
    elif action == 'h': 
        helps(messages['main_help'])
    
    elif action == 'q': 
        exit(0)
    
    elif action == 'a': 
        readline.set_completer(
            c.Completer(dict().fromkeys(dd)).complete
        )
        wc = add_line(cur, args) 
    
    elif action == 'r': 
        readline.set_completer(
            c.Completer(
                dict().fromkeys(
                    [str(line[0]) for line in period_data]
                )
            ).complete
        )
        wc = remove_line(cur, period_data, args)
    
    elif action == 'e': 
        readline.set_completer(
            c.Completer(
                dict().fromkeys(
                    [str(line[0]) for line in period_data] + dd
                )
            ).complete
        )
        wc = edit_line(cur, period_data, args)
    
    elif action == 'c':
        if args is not None: 
            wc = change_param(cur, current_period, *args)
        else:
            while True:
                clear()
                header('Параметры периода: ' + pretty_period(current_period))
                print_as_table([(param_str[i], period_params[i]) for i in changable_params], ' ')
                line()
             
                readline.set_completer(c.Completer(
                    dict.fromkeys(changable_params + ['h', 'q'], []
                )).complete)

                param, arg = command_parser(input(requests['conf']).lower().strip().split(' '), changable_params + ['q', 'h'])

                if param == 'q': break
                elif param == 'h': helps(messages['conf'])
                else:
                    try: arg = arg[0]
                    except: arg = None

                    wc = change_param(cur, current_period, param, arg)
                
                if wc: 
                    period_params, wc = get_period_params(cur, current_period)
           
    if wc:
        con.commit()
        wc = not wc

con.close()
clear()





