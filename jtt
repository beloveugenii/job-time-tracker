#!/usr/bin/env python3

import sqlite3, readline, sys, re, datetime, argparse
from ui import *
from libjtt import *
import completer as c

VERSION = '0.2.1-0'
DB_NAME = sys.path[0] + '/data.db'

parser = argparse.ArgumentParser(
        description='A simple program that allows you to keep track of the time worked',
)
parser.add_argument(
        '-v',
        '--version', 
        action='version', 
        version='%(prog)s ' + VERSION, 
        help='show version and exit'
)

args = parser.parse_args()


readline.parse_and_bind('tab: complete')

con = sqlite3.connect(DB_NAME)
cur = con.cursor()

create_tables(cur)
con.commit()

wc = False

while True:
    current_period, wc = get_current_period(cur)
    period_params, wc = get_period_params(cur, current_period)
    
    if wc:
        con.commit()
        wc = not wc

    period_data = get_period_data(cur, current_period)    

    # Вывод на экран
    clear()
    header(headers['main'] + ' ' + VERSION + ': ' + pretty_period(current_period))
    
    if period_params is not None:
        print_as_table(calculate(period_params, period_data), ' ')
        line() 

    if period_data: print_as_table(pretty_period_data(period_data), ' ')
    else: helps(messages['ndip'], 0)

    menu(menu_str, 3)

    readline.set_completer(c.Completer(
        {'a': dd, 
         'p': [], 
         'n': [],
         'h': [], 
         'q': [],
         'c': changable_params,
         'e': sorted([str(l) for l in range(1, len(period_data) + 1)]) + dd, 
         'r': sorted([str(l) for l in range(1, len(period_data) + 1)] ), 
    }).complete)

    action, args = command_parser(input('>> ').lower().strip().split(' '),''.join([w[0] for w in menu_str]))

    if action is None: 
        helps(messages['ua'])
    
    elif action in 'pn': 
        wc = change_period(cur, current_period, action)
    
    elif action == 'h': 
        helps(messages['main_help'])
    
    elif action == 'q': 
        exit(0)
    
    elif action == 'a': 
        readline.set_completer(
            c.Completer(dict().fromkeys(dd)).complete
        )
        wc = add_line(cur, args) 
    
    elif action == 'r': 
        readline.set_completer(
            c.Completer(
                dict().fromkeys([str(line[0]) for line in period_data])
            ).complete
        )
        wc = remove_line(cur, period_data, args)
    
    elif action == 'e': 
        readline.set_completer(
            c.Completer(
                dict().fromkeys([str(line[0]) for line in period_data] + dd)
            ).complete
        )
        wc = edit_line(cur, period_data, args)
    
    elif action == 'c':
        if args is not None: 
            wc = change_param(cur, current_period, *args)
        else:
            readline.set_completer(c.Completer(
                dict.fromkeys(changable_params + ['h', 'q'], []
            )).complete)
            
            end_work = False

            while not end_work:
                end_work, wc = conf(cur, current_period, period_params)
                if wc:
                    con.commit()
                    wc = not wc
                    period_params, wc = get_period_params(cur, current_period)

    if wc:
        con.commit()
        wc = not wc

con.close()
clear()





